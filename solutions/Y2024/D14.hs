module Y2024.D14 (main) where

import Solution
import AoC.Parsec
import AoC.Coord
import Data.List (group, sort)
import Math.NumberTheory.Moduli (chinese)

isExample :: Bool
isExample = False

width,height :: Int
width  = if isExample then 11 else 101
height = if isExample then 7 else 103

type Robot = (Coord,Coord)

inputP :: Parser Robot
inputP =   (,) <$ string "p="
       <*> pt <* string " v="
       <*> pt
 where
  pt = flip C <$> int <* char ',' <*> int

main :: Solution m => m ()
main = do
  robots <- parse' (sepEndBy1 inputP newline) =<< getInput
  let part1 = map (wait 100) robots
      steps = map (map fst) $ take (width * height) $ iterate (map (wait 1)) robots
      (part2, tree) = findTree steps
  answer $ safetyFactor part1
  answer (part2 :: Int)
  answerStr $ drawCoords tree
{- ^
······································█·····························································
···················█················································································
·············█·······································█··············································
······························█·····································································
···············································································█····················
·······█···········································█································█···············
························█·····································█································█····
··········································································█·························
····································································································
··█····················█·······································█······························█···█·
···············································································█····················
··█·················█··█············································································
········█······█··························█·············································█···········
····································································································
···················█················································································
··············█························█·····················································█······
···········█···················█····························································█·······
············█····················█··································································
···································································································█
································███████████████████████████████·····································
·············█··················█·····························█·····································
································█·····························█·····································
·························█······█·····························█·····································
·····················█·····█····█·····························█································█····
··················█·············█··············█··············█·····································
··············█······█··········█·············███·············█·····································
··········█·····················█············█████············█·····█·······························
································█···········███████···········█·························█······█····
································█··········█████████··········█····················█················
································█············█████············█························█············
·························█······█···········███████···········█······█······················█·······
································█··········█████████··········█·····································
································█·········███████████·········█····························█········
···········█····················█········█████████████········█·····································
·········█······················█··········█████████··········█····█································
································█·········███████████·········█·····································
································█········█████████████········█·····································
································█·······███████████████·······█·····································
································█······█████████████████······█··························█··········
·█················█·············█········█████████████········█·································█···
··························█·····█·······███████████████·······█·····································
····█···························█······█████████████████······█·····································
································█·····███████████████████·····█·····································
······█·············█···········█····█████████████████████····█··················█··················
································█·············███·············█·····································
······························█·█·············███·············█·····································
····························█···█·············███·············█·····································
································█·····························█···························█·········
································█·····························█·····································
································█·····························█·················█···················
································█·····························█········█··························█·
································███████████████████████████████·····································
·············································································█······················
···················█················································································
····█······························································································█
·························█····█··········█··············█······█········█······················█····
····································································································
··············································█·····················█·······························
····································································································
····································································································
······█·····························································································
····································································································
··············█·············································································█·······
····································································································
··································█·································································
·······················································································█············
···················································█················································
···························██·······································································
························█···········································································
····································································································
····················█·····················································█······················█··
············█········································█··············································
······█·····························································································
·································································································█··
····································································································
········█·······················································█·························█·········
····································································································
··············································································█·····················
····································································································
····································································································
····································································································
········█···························································································
···························█············█···········█························█······················
······█··················█·····█·························█·······················█··················
·························································································█·····█····
····························█··············································█························
····································································································
·····█···············█·················································█····························
····································································································
················█··········██·······································································
····································································································
················································█···················································
·························································································█········█·
············································································█·······················
·····························································█······································
······················█·······················█·····················································
············█···············································█·······································
█·····························█·····································································
············█·············█·········█·······························································
··························█·····█··············█·······························█····················
··············█·····················································································
······························█·····································································
···························█············································█···························
-}

-- | Finds the times that produce the lowest variance in X and Y individually,
--   and uses the Chinese Remainder Theorem to determine the time that produces
--   the minimum variance in X and Y simultaneously.
findTree :: [[Coord]] -> (Int, [Coord])
findTree steps =
  case chinese (tx,width) (ty,height) of
    Just (t,_) -> (t, steps !! t)
    _ -> error "uh, oh"
 where
  len = fromIntegral (length $ head steps) :: Double
  justXs = map (map xVal) steps
  justYs = map (map yVal) steps
  tx = snd $ minimum $ zip (map variance justXs) [0..]
  ty = snd $ minimum $ zip (map variance justYs) [0..]
  variance xs =
    let xs' = map fromIntegral xs
        mn = sum xs' / len
    in sum [(x-mn)^(2 :: Int) | x <- xs'] / (len-1)

wait :: Int -> Robot -> Robot
wait secs (C y x,vel@(C vy vx)) = (C y' x', vel)
 where
  y' = (y + secs * vy) `mod` height
  x' = (x + secs * vx) `mod` width

safetyFactor :: [Robot] -> Int
safetyFactor = product
             . map length
             . group . sort
             . map quadrant
             . filter onQuad
             . map fst
 where
  quadrant (C y x) = (2*y<height, 2*x<width)
  onQuad (C y x) = 2*y + 1 /= height && 2*x+1 /= width
